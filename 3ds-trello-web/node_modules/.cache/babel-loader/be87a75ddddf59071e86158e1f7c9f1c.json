{"remainingRequest":"/home/god/Projects/3ds-project-management-tool-plug-with-trello/node_modules/babel-loader/lib/index.js!/home/god/Projects/3ds-project-management-tool-plug-with-trello/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/god/Projects/3ds-project-management-tool-plug-with-trello/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/god/Projects/3ds-project-management-tool-plug-with-trello/src/components/Setting/DateRangePicker.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/god/Projects/3ds-project-management-tool-plug-with-trello/src/components/Setting/DateRangePicker.vue","mtime":1569990344692},{"path":"/home/god/Projects/3ds-project-management-tool-plug-with-trello/node_modules/cache-loader/dist/cjs.js","mtime":1565530642104},{"path":"/home/god/Projects/3ds-project-management-tool-plug-with-trello/node_modules/babel-loader/lib/index.js","mtime":1565530613452},{"path":"/home/god/Projects/3ds-project-management-tool-plug-with-trello/node_modules/cache-loader/dist/cjs.js","mtime":1565530642104},{"path":"/home/god/Projects/3ds-project-management-tool-plug-with-trello/node_modules/vue-loader/lib/index.js","mtime":1565530645604}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport _defineProperty from \"/home/god/Projects/3ds-project-management-tool-plug-with-trello/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport \"core-js/modules/es6.number.constructor\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport setscore from \"@/components/Setting/setscore\";\nimport selectlist from \"@/components/Setting/selectlist\";\nimport moment from \"moment\";\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\nimport { faCaretRight } from \"@fortawesome/free-solid-svg-icons\";\nimport DateRangePickerCalendar from \"./DateRangePickerCalendar\";\nimport { mapGetters } from \"vuex\";\nimport { BoardService } from \"../../services/BoardService\";\nvar boardservice = new BoardService();\nlibrary.add(faCaretRight);\nexport default {\n  provide: function provide() {\n    return {\n      parentValidator: this.$validator\n    };\n  },\n  props: {\n    calendarCount: {\n      type: Number,\n      default: 2\n    },\n    ranges: {\n      type: Object,\n      default: function _default() {\n        return {};\n      }\n    }\n  },\n  data: function data() {\n    return {\n      dismissSecs: 5,\n      dismissCountDown: 0,\n      pointt: [],\n      selectListed: [],\n      listed: Object,\n      isShowModel: false,\n      validated: false,\n      total: \"\",\n      startDate: moment.utc(),\n      endDate: moment.utc(),\n      rangeSelect: null,\n      month: moment.utc().subtract(1, \"month\").startOf(\"month\"),\n      step: null,\n      submitted: false\n    };\n  },\n  mounted: function mounted() {\n    this.checkDate();\n  },\n  computed: _objectSpread({}, mapGetters({\n    idBoard: \"user/idBoard\",\n    nameBoard: \"user/nameBoard\",\n    token: \"user/token\"\n  }), {\n    nextMonth: function nextMonth() {\n      return moment.utc(this.month).add(1, \"month\");\n    },\n    // For multi prop watchers\n    range: function range() {\n      return this.startDate, this.endDate;\n    }\n  }),\n  methods: {\n    focusInput: function focusInput() {\n      var _this = this;\n\n      setTimeout(function () {\n        _this.$refs.startDate.focus();\n      }, 200);\n    },\n    checkDate: function checkDate() {\n      var _this2 = this;\n\n      boardservice.fetchchecksetting({\n        idBoard: this.idBoard\n      }).then(function (res) {\n        _this2.isShowModel = true;\n        _this2.points = res.data.scoreSize;\n        _this2.lists = res.data.lists.list;\n        _this2.listed = res.data.lists.selectList;\n\n        if (res.data.date.status == true) {\n          _this2.startDated = moment.utc(res.data.date.startDate, \"YYYY/MM/DD\");\n          _this2.startDate = _this2.startDated;\n          _this2.validated = res.data.date.status; // this.totaled = res.data.date.sprintDay;\n\n          _this2.total = res.data.date.sprintDay;\n        }\n      }).catch(function (err) {\n        alert(err);\n      });\n    },\n    clear: function clear() {\n      this.total = \"\";\n    },\n    reset: function reset() {\n      this.validated = false;\n      this.startDate = moment.utc();\n      this.endDate = moment.utc();\n      this.total = \"\";\n      this.$refs.score.reset();\n      this.focusInput();\n    },\n    goToPrevMonth: function goToPrevMonth() {\n      this.month = moment.utc(this.month).subtract(1, \"month\");\n    },\n    goToNextMonth: function goToNextMonth() {\n      this.month = moment.utc(this.month).add(1, \"month\");\n    },\n    selectDate: function selectDate(date) {\n      if (this.step === \"selectStartDate\") {\n        this.startDate = date;\n      } else if (this.step === \"endDate\") {\n        this.endDate = date;\n      }\n    },\n    // Step flow for date range selections\n    nextStep: function nextStep() {\n      if (this.step === \"selectStartDate\") {\n        this.step = \"selectEndDate\";\n        this.$refs.endDate.focus();\n      } else if (this.step === \"endDate\") {\n        this.step = null;\n        this.$refs.endDate.blur();\n      }\n    },\n    // Try to update the step date from an input value\n    inputDate: function inputDate(input) {\n      var date = moment.utc(input.target.value, \"YYYY/MM/DD\");\n\n      if (date.isValid()) {\n        this.selectDate(date);\n      }\n\n      this.nextStep();\n    },\n    formValidate: function formValidate() {\n      return this.$refs.select.formValidate(), this.$refs.score.formValidate();\n    },\n    countDownChanged: function countDownChanged(dismissCountDown) {\n      this.dismissCountDown = dismissCountDown;\n    },\n    submit: function submit() {\n      var _this3 = this;\n\n      this.submitted = true;\n      this.$validator.validate().then(function (valid) {\n        _this3.formValidate();\n\n        _this3.totaled = parseInt(_this3.total);\n\n        if (valid) {\n          _this3.dismissCountDown = _this3.dismissSecs;\n          boardservice.fetchsettingdata({\n            sprintDate: {\n              startDate: _this3.startDate,\n              sprintDay: _this3.totaled,\n              endDate: _this3.endDate,\n              idBoard: _this3.idBoard\n            },\n            scoreSize: {\n              Points: [parseFloat(_this3.pointt[0]), parseFloat(_this3.pointt[1]), parseFloat(_this3.pointt[2]), parseFloat(_this3.pointt[3]), parseFloat(_this3.pointt[4]), parseFloat(_this3.pointt[5]), parseFloat(_this3.pointt[6]), parseFloat(_this3.pointt[7])]\n            },\n            selectList: _this3.selectListed\n          }).then(function () {// this.$router.push(\"/feature\");\n          }).catch(function (err) {\n            if (err) {\n              alert(\"Sorry Connection not found\");\n            }\n          });\n        }\n      });\n    }\n  },\n  watch: {\n    total: function total(value) {\n      this.endDate = moment.utc(this.startDate, \"YYYY/MM/DD\").add(1 * value - 1, \"days\");\n    }\n  },\n  filters: {\n    dateFormat: function dateFormat(value) {\n      return value ? value.format(\"YYYY/MM/DD\") : \"\";\n    }\n  },\n  components: {\n    DateRangePickerCalendar: DateRangePickerCalendar,\n    setscore: setscore,\n    selectlist: selectlist\n  }\n};",{"version":3,"sources":["DateRangePicker.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+FA,OAAA,QAAA,MAAA,+BAAA;AACA,OAAA,UAAA,MAAA,iCAAA;AACA,OAAA,MAAA,MAAA,QAAA;AACA,SAAA,OAAA,QAAA,mCAAA;AACA,SAAA,YAAA,QAAA,mCAAA;AACA,OAAA,uBAAA;AACA,SAAA,UAAA,QAAA,MAAA;AACA,SAAA,YAAA;AAEA,IAAA,YAAA,GAAA,IAAA,YAAA,EAAA;AAEA,OAAA,CAAA,GAAA,CAAA,YAAA;AAEA,eAAA;AACA,EAAA,OADA,qBACA;AACA,WAAA;AAAA,MAAA,eAAA,EAAA,KAAA;AAAA,KAAA;AACA,GAHA;AAIA,EAAA,KAAA,EAAA;AACA,IAAA,aAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,OAAA,EAAA;AAFA,KADA;AAMA,IAAA,MAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,OAAA,EAAA,oBAAA;AACA,eAAA,EAAA;AACA;AAJA;AANA,GAJA;AAiBA,EAAA,IAjBA,kBAiBA;AACA,WAAA;AACA,MAAA,WAAA,EAAA,CADA;AAEA,MAAA,gBAAA,EAAA,CAFA;AAGA,MAAA,MAAA,EAAA,EAHA;AAIA,MAAA,YAAA,EAAA,EAJA;AAKA,MAAA,MAAA,EAAA,MALA;AAMA,MAAA,WAAA,EAAA,KANA;AAOA,MAAA,SAAA,EAAA,KAPA;AAQA,MAAA,KAAA,EAAA,EARA;AASA,MAAA,SAAA,EAAA,MAAA,CAAA,GAAA,EATA;AAUA,MAAA,OAAA,EAAA,MAAA,CAAA,GAAA,EAVA;AAWA,MAAA,WAAA,EAAA,IAXA;AAYA,MAAA,KAAA,EAAA,MAAA,CACA,GADA,GAEA,QAFA,CAEA,CAFA,EAEA,OAFA,EAGA,OAHA,CAGA,OAHA,CAZA;AAgBA,MAAA,IAAA,EAAA,IAhBA;AAiBA,MAAA,SAAA,EAAA;AAjBA,KAAA;AAmBA,GArCA;AAsCA,EAAA,OAAA,EAAA,mBAAA;AACA,SAAA,SAAA;AACA,GAxCA;AA0CA,EAAA,QAAA,oBACA,UAAA,CAAA;AACA,IAAA,OAAA,EAAA,cADA;AAEA,IAAA,SAAA,EAAA,gBAFA;AAGA,IAAA,KAAA,EAAA;AAHA,GAAA,CADA;AAMA,IAAA,SAAA,EAAA,qBAAA;AACA,aAAA,MAAA,CAAA,GAAA,CAAA,KAAA,KAAA,EAAA,GAAA,CAAA,CAAA,EAAA,OAAA,CAAA;AACA,KARA;AASA;AACA,IAAA,KAAA,EAAA,iBAAA;AACA,aAAA,KAAA,SAAA,EAAA,KAAA,OAAA;AACA;AAZA,IA1CA;AAyDA,EAAA,OAAA,EAAA;AACA,IAAA,UADA,wBACA;AAAA;;AACA,MAAA,UAAA,CAAA,YAAA;AACA,QAAA,KAAA,CAAA,KAAA,CAAA,SAAA,CAAA,KAAA;AACA,OAFA,EAEA,GAFA,CAAA;AAGA,KALA;AAMA,IAAA,SAAA,EAAA,qBAAA;AAAA;;AACA,MAAA,YAAA,CACA,iBADA,CACA;AAAA,QAAA,OAAA,EAAA,KAAA;AAAA,OADA,EAEA,IAFA,CAEA,UAAA,GAAA,EAAA;AACA,QAAA,MAAA,CAAA,WAAA,GAAA,IAAA;AACA,QAAA,MAAA,CAAA,MAAA,GAAA,GAAA,CAAA,IAAA,CAAA,SAAA;AACA,QAAA,MAAA,CAAA,KAAA,GAAA,GAAA,CAAA,IAAA,CAAA,KAAA,CAAA,IAAA;AACA,QAAA,MAAA,CAAA,MAAA,GAAA,GAAA,CAAA,IAAA,CAAA,KAAA,CAAA,UAAA;;AACA,YAAA,GAAA,CAAA,IAAA,CAAA,IAAA,CAAA,MAAA,IAAA,IAAA,EAAA;AACA,UAAA,MAAA,CAAA,UAAA,GAAA,MAAA,CAAA,GAAA,CAAA,GAAA,CAAA,IAAA,CAAA,IAAA,CAAA,SAAA,EAAA,YAAA,CAAA;AACA,UAAA,MAAA,CAAA,SAAA,GAAA,MAAA,CAAA,UAAA;AACA,UAAA,MAAA,CAAA,SAAA,GAAA,GAAA,CAAA,IAAA,CAAA,IAAA,CAAA,MAAA,CAHA,CAIA;;AACA,UAAA,MAAA,CAAA,KAAA,GAAA,GAAA,CAAA,IAAA,CAAA,IAAA,CAAA,SAAA;AACA;AACA,OAdA,EAeA,KAfA,CAeA,UAAA,GAAA,EAAA;AACA,QAAA,KAAA,CAAA,GAAA,CAAA;AACA,OAjBA;AAkBA,KAzBA;AA0BA,IAAA,KAAA,EAAA,iBAAA;AACA,WAAA,KAAA,GAAA,EAAA;AACA,KA5BA;AA8BA,IAAA,KAAA,EAAA,iBAAA;AACA,WAAA,SAAA,GAAA,KAAA;AACA,WAAA,SAAA,GAAA,MAAA,CAAA,GAAA,EAAA;AACA,WAAA,OAAA,GAAA,MAAA,CAAA,GAAA,EAAA;AACA,WAAA,KAAA,GAAA,EAAA;AACA,WAAA,KAAA,CAAA,KAAA,CAAA,KAAA;AACA,WAAA,UAAA;AACA,KArCA;AAuCA,IAAA,aAAA,EAAA,yBAAA;AACA,WAAA,KAAA,GAAA,MAAA,CAAA,GAAA,CAAA,KAAA,KAAA,EAAA,QAAA,CAAA,CAAA,EAAA,OAAA,CAAA;AACA,KAzCA;AA0CA,IAAA,aAAA,EAAA,yBAAA;AACA,WAAA,KAAA,GAAA,MAAA,CAAA,GAAA,CAAA,KAAA,KAAA,EAAA,GAAA,CAAA,CAAA,EAAA,OAAA,CAAA;AACA,KA5CA;AA6CA,IAAA,UAAA,EAAA,oBAAA,IAAA,EAAA;AACA,UAAA,KAAA,IAAA,KAAA,iBAAA,EAAA;AACA,aAAA,SAAA,GAAA,IAAA;AACA,OAFA,MAEA,IAAA,KAAA,IAAA,KAAA,SAAA,EAAA;AACA,aAAA,OAAA,GAAA,IAAA;AACA;AACA,KAnDA;AAoDA;AACA,IAAA,QAAA,EAAA,oBAAA;AACA,UAAA,KAAA,IAAA,KAAA,iBAAA,EAAA;AACA,aAAA,IAAA,GAAA,eAAA;AACA,aAAA,KAAA,CAAA,OAAA,CAAA,KAAA;AACA,OAHA,MAGA,IAAA,KAAA,IAAA,KAAA,SAAA,EAAA;AACA,aAAA,IAAA,GAAA,IAAA;AACA,aAAA,KAAA,CAAA,OAAA,CAAA,IAAA;AACA;AACA,KA7DA;AA+DA;AACA,IAAA,SAAA,EAAA,mBAAA,KAAA,EAAA;AACA,UAAA,IAAA,GAAA,MAAA,CAAA,GAAA,CAAA,KAAA,CAAA,MAAA,CAAA,KAAA,EAAA,YAAA,CAAA;;AACA,UAAA,IAAA,CAAA,OAAA,EAAA,EAAA;AACA,aAAA,UAAA,CAAA,IAAA;AACA;;AACA,WAAA,QAAA;AACA,KAtEA;AAuEA,IAAA,YAvEA,0BAuEA;AACA,aAAA,KAAA,KAAA,CAAA,MAAA,CAAA,YAAA,IAAA,KAAA,KAAA,CAAA,KAAA,CAAA,YAAA,EAAA;AACA,KAzEA;AA0EA,IAAA,gBA1EA,4BA0EA,gBA1EA,EA0EA;AACA,WAAA,gBAAA,GAAA,gBAAA;AACA,KA5EA;AA6EA,IAAA,MAAA,EAAA,kBAAA;AAAA;;AACA,WAAA,SAAA,GAAA,IAAA;AACA,WAAA,UAAA,CAAA,QAAA,GAAA,IAAA,CAAA,UAAA,KAAA,EAAA;AACA,QAAA,MAAA,CAAA,YAAA;;AACA,QAAA,MAAA,CAAA,OAAA,GAAA,QAAA,CAAA,MAAA,CAAA,KAAA,CAAA;;AACA,YAAA,KAAA,EAAA;AACA,UAAA,MAAA,CAAA,gBAAA,GAAA,MAAA,CAAA,WAAA;AACA,UAAA,YAAA,CACA,gBADA,CACA;AACA,YAAA,UAAA,EAAA;AACA,cAAA,SAAA,EAAA,MAAA,CAAA,SADA;AAEA,cAAA,SAAA,EAAA,MAAA,CAAA,OAFA;AAGA,cAAA,OAAA,EAAA,MAAA,CAAA,OAHA;AAIA,cAAA,OAAA,EAAA,MAAA,CAAA;AAJA,aADA;AAOA,YAAA,SAAA,EAAA;AACA,cAAA,MAAA,EAAA,CACA,UAAA,CAAA,MAAA,CAAA,MAAA,CAAA,CAAA,CAAA,CADA,EAEA,UAAA,CAAA,MAAA,CAAA,MAAA,CAAA,CAAA,CAAA,CAFA,EAGA,UAAA,CAAA,MAAA,CAAA,MAAA,CAAA,CAAA,CAAA,CAHA,EAIA,UAAA,CAAA,MAAA,CAAA,MAAA,CAAA,CAAA,CAAA,CAJA,EAKA,UAAA,CAAA,MAAA,CAAA,MAAA,CAAA,CAAA,CAAA,CALA,EAMA,UAAA,CAAA,MAAA,CAAA,MAAA,CAAA,CAAA,CAAA,CANA,EAOA,UAAA,CAAA,MAAA,CAAA,MAAA,CAAA,CAAA,CAAA,CAPA,EAQA,UAAA,CAAA,MAAA,CAAA,MAAA,CAAA,CAAA,CAAA,CARA;AADA,aAPA;AAmBA,YAAA,UAAA,EAAA,MAAA,CAAA;AAnBA,WADA,EAsBA,IAtBA,CAsBA,YAAA,CACA;AACA,WAxBA,EAyBA,KAzBA,CAyBA,UAAA,GAAA,EAAA;AACA,gBAAA,GAAA,EAAA;AACA,cAAA,KAAA,CAAA,4BAAA,CAAA;AACA;AACA,WA7BA;AA8BA;AACA,OApCA;AAqCA;AApHA,GAzDA;AA+KA,EAAA,KAAA,EAAA;AACA,IAAA,KAAA,EAAA,eAAA,KAAA,EAAA;AACA,WAAA,OAAA,GAAA,MAAA,CACA,GADA,CACA,KAAA,SADA,EACA,YADA,EAEA,GAFA,CAEA,IAAA,KAAA,GAAA,CAFA,EAEA,MAFA,CAAA;AAGA;AALA,GA/KA;AAsLA,EAAA,OAAA,EAAA;AACA,IAAA,UAAA,EAAA,oBAAA,KAAA,EAAA;AACA,aAAA,KAAA,GAAA,KAAA,CAAA,MAAA,CAAA,YAAA,CAAA,GAAA,EAAA;AACA;AAHA,GAtLA;AA2LA,EAAA,UAAA,EAAA;AAAA,IAAA,uBAAA,EAAA,uBAAA;AAAA,IAAA,QAAA,EAAA,QAAA;AAAA,IAAA,UAAA,EAAA;AAAA;AA3LA,CAAA","sourcesContent":["<template>\n  <b-container class=\"bv-example-row row-setdate\">\n    <div class=\"animated fadeIn loading\" v-if=\"isShowModel === false\">\n      <b-spinner style=\"width: 3rem; height: 3rem;\" label=\"Large Spinner\" type=\"grow\"></b-spinner>\n    </div>\n    <div class=\"card card-setdate\" v-if=\"isShowModel === true\">\n      <b-alert\n        variant=\"success\"\n        dismissible\n        :show=\"dismissCountDown\"\n        @dismissed=\"dismissCountDown=0\"\n        @dismiss-count-down=\"countDownChanged\"\n      >Save Success</b-alert>\n      <b-row>\n        <b-col v-for=\"calendarIndex in calendarCount\" :key=\"calendarIndex\">\n          <date-range-picker-calendar\n            :calendarIndex=\"calendarIndex\"\n            :calendarCount=\"calendarCount\"\n            :month=\"month\"\n            :startDate=\"startDate\"\n            :endDate=\"endDate\"\n            :step=\"step\"\n            v-on:goToPrevMonth=\"goToPrevMonth\"\n            v-on:goToNextMonth=\"goToNextMonth\"\n            v-on:selectDate=\"selectDate\"\n            v-on:nextStep=\"nextStep\"\n          />\n        </b-col>\n        <b-col class=\"col-setdate\">\n          <h2 class=\"pb-4\">Set Date Time Stamp</h2>\n          <p>Start Sprint</p>\n          <div class=\"form-group form-inline flex-nowrap\">\n            <input\n              type=\"text\"\n              class=\"form-control w-100 daterangepicker-date-input\"\n              ref=\"startDate\"\n              :value=\"startDate | dateFormat\"\n              :disabled=\"validated\"\n              @click=\"reset\"\n              @focus=\"step = 'selectStartDate'\"\n              @blur=\"inputDate\"\n            />\n          </div>\n          <br />\n          <p>Sprint Period (Day)</p>\n          <input\n            name=\"total\"\n            type=\"text\"\n            class=\"form-control w-100 daterangepicker-date-input\"\n            pattern=\"^[1-9]+\"\n            ref=\"endDate\"\n            placeholder=\"1 - 30\"\n            :disabled=\"validated\"\n            v-model=\"total\"\n            v-validate=\"'required|numeric|max:2'\"\n            :class=\"{ 'is-invalid': submitted && errors.has('total') }\"\n          />\n          <br />\n          <div\n            v-if=\"submitted && errors.has('total')\"\n            class=\"invalid-feedback\"\n          >{{ errors.first('total') }}</div>\n          <br />\n          <div class=\"form-group form-inline justify-content-end mb-0\">\n            <button type=\"button\" class=\"btn btn-light mr-2\" @click=\"reset\">Reset</button>\n            <button\n              type=\"button\"\n              class=\"btn btn-primary submitbtn\"\n              @click=\"submit\"\n              :disabled=\"validated\"\n            >Submit</button>\n          </div>\n        </b-col>\n      </b-row>\n    </div>\n    <b-card-group columns class=\"card-rows cols-2 mb-3\" v-if=\"isShowModel === true\">\n      <setscore\n        :point=\"pointt\"\n        @input=\"(newpoint) => {pointt = newpoint}\"\n        :model=\"points\"\n        class=\"scoreCard\"\n        ref=\"score\"\n      ></setscore>\n      <selectlist\n        :model=\"lists\"\n        :selectListed=\"selectListed\"\n        class=\"listCard\"\n        :listed=\"listed\"\n        ref=\"select\"\n      >{{selectListed}}</selectlist>\n    </b-card-group>\n  </b-container>\n</template>\n\n<script>\nimport setscore from \"@/components/Setting/setscore\";\nimport selectlist from \"@/components/Setting/selectlist\";\nimport moment from \"moment\";\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\nimport { faCaretRight } from \"@fortawesome/free-solid-svg-icons\";\nimport DateRangePickerCalendar from \"./DateRangePickerCalendar\";\nimport { mapGetters } from \"vuex\";\nimport { BoardService } from \"../../services/BoardService\";\n\nconst boardservice = new BoardService();\n\nlibrary.add(faCaretRight);\n\nexport default {\n  provide() {\n    return { parentValidator: this.$validator };\n  },\n  props: {\n    calendarCount: {\n      type: Number,\n      default: 2\n    },\n\n    ranges: {\n      type: Object,\n      default: function() {\n        return {};\n      }\n    }\n  },\n  data() {\n    return {\n      dismissSecs: 5,\n      dismissCountDown: 0,\n      pointt: [],\n      selectListed: [],\n      listed: Object,\n      isShowModel: false,\n      validated: false,\n      total: \"\",\n      startDate: moment.utc(),\n      endDate: moment.utc(),\n      rangeSelect: null,\n      month: moment\n        .utc()\n        .subtract(1, \"month\")\n        .startOf(\"month\"),\n      step: null,\n      submitted: false\n    };\n  },\n  mounted: function() {\n    this.checkDate();\n  },\n\n  computed: {\n    ...mapGetters({\n      idBoard: \"user/idBoard\",\n      nameBoard: \"user/nameBoard\",\n      token: \"user/token\"\n    }),\n    nextMonth: function() {\n      return moment.utc(this.month).add(1, \"month\");\n    },\n    // For multi prop watchers\n    range: function() {\n      return this.startDate, this.endDate;\n    }\n  },\n\n  methods: {\n    focusInput() {\n      setTimeout(() => {\n        this.$refs.startDate.focus();\n      }, 200);\n    },\n    checkDate: function() {\n      boardservice\n        .fetchchecksetting({ idBoard: this.idBoard })\n        .then(res => {\n          this.isShowModel = true;\n          this.points = res.data.scoreSize;\n          this.lists = res.data.lists.list;\n          this.listed = res.data.lists.selectList;\n          if (res.data.date.status == true) {\n            this.startDated = moment.utc(res.data.date.startDate, \"YYYY/MM/DD\");\n            this.startDate = this.startDated;\n            this.validated = res.data.date.status;\n            // this.totaled = res.data.date.sprintDay;\n            this.total = res.data.date.sprintDay;\n          }\n        })\n        .catch(err => {\n          alert(err);\n        });\n    },\n    clear: function() {\n      this.total = \"\";\n    },\n\n    reset: function() {\n      this.validated = false;\n      this.startDate = moment.utc();\n      this.endDate = moment.utc();\n      this.total = \"\";\n      this.$refs.score.reset();\n      this.focusInput();\n    },\n\n    goToPrevMonth: function() {\n      this.month = moment.utc(this.month).subtract(1, \"month\");\n    },\n    goToNextMonth: function() {\n      this.month = moment.utc(this.month).add(1, \"month\");\n    },\n    selectDate: function(date) {\n      if (this.step === \"selectStartDate\") {\n        this.startDate = date;\n      } else if (this.step === \"endDate\") {\n        this.endDate = date;\n      }\n    },\n    // Step flow for date range selections\n    nextStep: function() {\n      if (this.step === \"selectStartDate\") {\n        this.step = \"selectEndDate\";\n        this.$refs.endDate.focus();\n      } else if (this.step === \"endDate\") {\n        this.step = null;\n        this.$refs.endDate.blur();\n      }\n    },\n\n    // Try to update the step date from an input value\n    inputDate: function(input) {\n      let date = moment.utc(input.target.value, \"YYYY/MM/DD\");\n      if (date.isValid()) {\n        this.selectDate(date);\n      }\n      this.nextStep();\n    },\n    formValidate() {\n      return this.$refs.select.formValidate(), this.$refs.score.formValidate();\n    },\n    countDownChanged(dismissCountDown) {\n        this.dismissCountDown = dismissCountDown\n      },\n    submit: function() {\n      this.submitted = true;\n      this.$validator.validate().then(valid => {\n        this.formValidate();\n        this.totaled = parseInt(this.total);\n        if (valid) {\n          this.dismissCountDown = this.dismissSecs\n          boardservice\n            .fetchsettingdata({\n              sprintDate: {\n                startDate: this.startDate,\n                sprintDay: this.totaled,\n                endDate: this.endDate,\n                idBoard: this.idBoard\n              },\n              scoreSize: {\n                Points: [\n                  parseFloat(this.pointt[0]),\n                  parseFloat(this.pointt[1]),\n                  parseFloat(this.pointt[2]),\n                  parseFloat(this.pointt[3]),\n                  parseFloat(this.pointt[4]),\n                  parseFloat(this.pointt[5]),\n                  parseFloat(this.pointt[6]),\n                  parseFloat(this.pointt[7])\n                ]\n              },\n              selectList: this.selectListed\n            })\n            .then(() => {\n              // this.$router.push(\"/feature\");\n            })\n            .catch(err => {\n              if (err) {\n                alert(\"Sorry Connection not found\");\n              }\n            });\n        }\n      });\n    }\n  },\n  watch: {\n    total: function(value) {\n      this.endDate = moment\n        .utc(this.startDate, \"YYYY/MM/DD\")\n        .add(1 * value - 1, \"days\");\n    }\n  },\n  filters: {\n    dateFormat: function(value) {\n      return value ? value.format(\"YYYY/MM/DD\") : \"\";\n    }\n  },\n  components: { DateRangePickerCalendar, setscore, selectlist }\n};\n</script>\n\n<style>\n/* Custom row */\n.daterangepicker-row {\n  margin: -0.5rem;\n}\n.daterangepicker-date-input {\n  min-width: 120px;\n}\n\n/* Select menus border */\n.daterangepicker-range-border {\n  border-color: #17a2b8 !important;\n}\n\n.daterangepicker-range {\n  background-color: red !important;\n  color: #ffffff;\n}\n\n/* Date input focus */\n.daterangepicker-date-input:focus {\n  border-color: #17a2b8 !important;\n  box-shadow: 0 0 0 0.2rem rgba(23, 162, 184, 0.25) !important;\n}\n\n.col-setdate {\n  padding: 40px;\n}\n\n.row-setdate {\n  display: -ms-flexbox;\n  display: flex;\n  -ms-flex-wrap: wrap;\n  flex-wrap: wrap;\n}\n\n.card-setdate {\n  border-radius: 10px;\n}\n\n.loading {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n}\n</style>\n"],"sourceRoot":"src/components/Setting"}]}