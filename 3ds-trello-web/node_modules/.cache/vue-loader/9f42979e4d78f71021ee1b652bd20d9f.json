{"remainingRequest":"/home/god/Projects/3ds-project-management-tool-plug-with-trello/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/god/Projects/3ds-project-management-tool-plug-with-trello/src/components/Setting/DateRangePicker.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/god/Projects/3ds-project-management-tool-plug-with-trello/src/components/Setting/DateRangePicker.vue","mtime":1569990344692},{"path":"/home/god/Projects/3ds-project-management-tool-plug-with-trello/node_modules/cache-loader/dist/cjs.js","mtime":1565530642104},{"path":"/home/god/Projects/3ds-project-management-tool-plug-with-trello/node_modules/babel-loader/lib/index.js","mtime":1565530613452},{"path":"/home/god/Projects/3ds-project-management-tool-plug-with-trello/node_modules/cache-loader/dist/cjs.js","mtime":1565530642104},{"path":"/home/god/Projects/3ds-project-management-tool-plug-with-trello/node_modules/vue-loader/lib/index.js","mtime":1565530645604}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport setscore from \"@/components/Setting/setscore\";\nimport selectlist from \"@/components/Setting/selectlist\";\nimport moment from \"moment\";\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\nimport { faCaretRight } from \"@fortawesome/free-solid-svg-icons\";\nimport DateRangePickerCalendar from \"./DateRangePickerCalendar\";\nimport { mapGetters } from \"vuex\";\nimport { BoardService } from \"../../services/BoardService\";\n\nconst boardservice = new BoardService();\n\nlibrary.add(faCaretRight);\n\nexport default {\n  provide() {\n    return { parentValidator: this.$validator };\n  },\n  props: {\n    calendarCount: {\n      type: Number,\n      default: 2\n    },\n\n    ranges: {\n      type: Object,\n      default: function() {\n        return {};\n      }\n    }\n  },\n  data() {\n    return {\n      dismissSecs: 5,\n      dismissCountDown: 0,\n      pointt: [],\n      selectListed: [],\n      listed: Object,\n      isShowModel: false,\n      validated: false,\n      total: \"\",\n      startDate: moment.utc(),\n      endDate: moment.utc(),\n      rangeSelect: null,\n      month: moment\n        .utc()\n        .subtract(1, \"month\")\n        .startOf(\"month\"),\n      step: null,\n      submitted: false\n    };\n  },\n  mounted: function() {\n    this.checkDate();\n  },\n\n  computed: {\n    ...mapGetters({\n      idBoard: \"user/idBoard\",\n      nameBoard: \"user/nameBoard\",\n      token: \"user/token\"\n    }),\n    nextMonth: function() {\n      return moment.utc(this.month).add(1, \"month\");\n    },\n    // For multi prop watchers\n    range: function() {\n      return this.startDate, this.endDate;\n    }\n  },\n\n  methods: {\n    focusInput() {\n      setTimeout(() => {\n        this.$refs.startDate.focus();\n      }, 200);\n    },\n    checkDate: function() {\n      boardservice\n        .fetchchecksetting({ idBoard: this.idBoard })\n        .then(res => {\n          this.isShowModel = true;\n          this.points = res.data.scoreSize;\n          this.lists = res.data.lists.list;\n          this.listed = res.data.lists.selectList;\n          if (res.data.date.status == true) {\n            this.startDated = moment.utc(res.data.date.startDate, \"YYYY/MM/DD\");\n            this.startDate = this.startDated;\n            this.validated = res.data.date.status;\n            // this.totaled = res.data.date.sprintDay;\n            this.total = res.data.date.sprintDay;\n          }\n        })\n        .catch(err => {\n          alert(err);\n        });\n    },\n    clear: function() {\n      this.total = \"\";\n    },\n\n    reset: function() {\n      this.validated = false;\n      this.startDate = moment.utc();\n      this.endDate = moment.utc();\n      this.total = \"\";\n      this.$refs.score.reset();\n      this.focusInput();\n    },\n\n    goToPrevMonth: function() {\n      this.month = moment.utc(this.month).subtract(1, \"month\");\n    },\n    goToNextMonth: function() {\n      this.month = moment.utc(this.month).add(1, \"month\");\n    },\n    selectDate: function(date) {\n      if (this.step === \"selectStartDate\") {\n        this.startDate = date;\n      } else if (this.step === \"endDate\") {\n        this.endDate = date;\n      }\n    },\n    // Step flow for date range selections\n    nextStep: function() {\n      if (this.step === \"selectStartDate\") {\n        this.step = \"selectEndDate\";\n        this.$refs.endDate.focus();\n      } else if (this.step === \"endDate\") {\n        this.step = null;\n        this.$refs.endDate.blur();\n      }\n    },\n\n    // Try to update the step date from an input value\n    inputDate: function(input) {\n      let date = moment.utc(input.target.value, \"YYYY/MM/DD\");\n      if (date.isValid()) {\n        this.selectDate(date);\n      }\n      this.nextStep();\n    },\n    formValidate() {\n      return this.$refs.select.formValidate(), this.$refs.score.formValidate();\n    },\n    countDownChanged(dismissCountDown) {\n        this.dismissCountDown = dismissCountDown\n      },\n    submit: function() {\n      this.submitted = true;\n      this.$validator.validate().then(valid => {\n        this.formValidate();\n        this.totaled = parseInt(this.total);\n        if (valid) {\n          this.dismissCountDown = this.dismissSecs\n          boardservice\n            .fetchsettingdata({\n              sprintDate: {\n                startDate: this.startDate,\n                sprintDay: this.totaled,\n                endDate: this.endDate,\n                idBoard: this.idBoard\n              },\n              scoreSize: {\n                Points: [\n                  parseFloat(this.pointt[0]),\n                  parseFloat(this.pointt[1]),\n                  parseFloat(this.pointt[2]),\n                  parseFloat(this.pointt[3]),\n                  parseFloat(this.pointt[4]),\n                  parseFloat(this.pointt[5]),\n                  parseFloat(this.pointt[6]),\n                  parseFloat(this.pointt[7])\n                ]\n              },\n              selectList: this.selectListed\n            })\n            .then(() => {\n              // this.$router.push(\"/feature\");\n            })\n            .catch(err => {\n              if (err) {\n                alert(\"Sorry Connection not found\");\n              }\n            });\n        }\n      });\n    }\n  },\n  watch: {\n    total: function(value) {\n      this.endDate = moment\n        .utc(this.startDate, \"YYYY/MM/DD\")\n        .add(1 * value - 1, \"days\");\n    }\n  },\n  filters: {\n    dateFormat: function(value) {\n      return value ? value.format(\"YYYY/MM/DD\") : \"\";\n    }\n  },\n  components: { DateRangePickerCalendar, setscore, selectlist }\n};\n",{"version":3,"sources":["DateRangePicker.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"DateRangePicker.vue","sourceRoot":"src/components/Setting","sourcesContent":["<template>\n  <b-container class=\"bv-example-row row-setdate\">\n    <div class=\"animated fadeIn loading\" v-if=\"isShowModel === false\">\n      <b-spinner style=\"width: 3rem; height: 3rem;\" label=\"Large Spinner\" type=\"grow\"></b-spinner>\n    </div>\n    <div class=\"card card-setdate\" v-if=\"isShowModel === true\">\n      <b-alert\n        variant=\"success\"\n        dismissible\n        :show=\"dismissCountDown\"\n        @dismissed=\"dismissCountDown=0\"\n        @dismiss-count-down=\"countDownChanged\"\n      >Save Success</b-alert>\n      <b-row>\n        <b-col v-for=\"calendarIndex in calendarCount\" :key=\"calendarIndex\">\n          <date-range-picker-calendar\n            :calendarIndex=\"calendarIndex\"\n            :calendarCount=\"calendarCount\"\n            :month=\"month\"\n            :startDate=\"startDate\"\n            :endDate=\"endDate\"\n            :step=\"step\"\n            v-on:goToPrevMonth=\"goToPrevMonth\"\n            v-on:goToNextMonth=\"goToNextMonth\"\n            v-on:selectDate=\"selectDate\"\n            v-on:nextStep=\"nextStep\"\n          />\n        </b-col>\n        <b-col class=\"col-setdate\">\n          <h2 class=\"pb-4\">Set Date Time Stamp</h2>\n          <p>Start Sprint</p>\n          <div class=\"form-group form-inline flex-nowrap\">\n            <input\n              type=\"text\"\n              class=\"form-control w-100 daterangepicker-date-input\"\n              ref=\"startDate\"\n              :value=\"startDate | dateFormat\"\n              :disabled=\"validated\"\n              @click=\"reset\"\n              @focus=\"step = 'selectStartDate'\"\n              @blur=\"inputDate\"\n            />\n          </div>\n          <br />\n          <p>Sprint Period (Day)</p>\n          <input\n            name=\"total\"\n            type=\"text\"\n            class=\"form-control w-100 daterangepicker-date-input\"\n            pattern=\"^[1-9]+\"\n            ref=\"endDate\"\n            placeholder=\"1 - 30\"\n            :disabled=\"validated\"\n            v-model=\"total\"\n            v-validate=\"'required|numeric|max:2'\"\n            :class=\"{ 'is-invalid': submitted && errors.has('total') }\"\n          />\n          <br />\n          <div\n            v-if=\"submitted && errors.has('total')\"\n            class=\"invalid-feedback\"\n          >{{ errors.first('total') }}</div>\n          <br />\n          <div class=\"form-group form-inline justify-content-end mb-0\">\n            <button type=\"button\" class=\"btn btn-light mr-2\" @click=\"reset\">Reset</button>\n            <button\n              type=\"button\"\n              class=\"btn btn-primary submitbtn\"\n              @click=\"submit\"\n              :disabled=\"validated\"\n            >Submit</button>\n          </div>\n        </b-col>\n      </b-row>\n    </div>\n    <b-card-group columns class=\"card-rows cols-2 mb-3\" v-if=\"isShowModel === true\">\n      <setscore\n        :point=\"pointt\"\n        @input=\"(newpoint) => {pointt = newpoint}\"\n        :model=\"points\"\n        class=\"scoreCard\"\n        ref=\"score\"\n      ></setscore>\n      <selectlist\n        :model=\"lists\"\n        :selectListed=\"selectListed\"\n        class=\"listCard\"\n        :listed=\"listed\"\n        ref=\"select\"\n      >{{selectListed}}</selectlist>\n    </b-card-group>\n  </b-container>\n</template>\n\n<script>\nimport setscore from \"@/components/Setting/setscore\";\nimport selectlist from \"@/components/Setting/selectlist\";\nimport moment from \"moment\";\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\nimport { faCaretRight } from \"@fortawesome/free-solid-svg-icons\";\nimport DateRangePickerCalendar from \"./DateRangePickerCalendar\";\nimport { mapGetters } from \"vuex\";\nimport { BoardService } from \"../../services/BoardService\";\n\nconst boardservice = new BoardService();\n\nlibrary.add(faCaretRight);\n\nexport default {\n  provide() {\n    return { parentValidator: this.$validator };\n  },\n  props: {\n    calendarCount: {\n      type: Number,\n      default: 2\n    },\n\n    ranges: {\n      type: Object,\n      default: function() {\n        return {};\n      }\n    }\n  },\n  data() {\n    return {\n      dismissSecs: 5,\n      dismissCountDown: 0,\n      pointt: [],\n      selectListed: [],\n      listed: Object,\n      isShowModel: false,\n      validated: false,\n      total: \"\",\n      startDate: moment.utc(),\n      endDate: moment.utc(),\n      rangeSelect: null,\n      month: moment\n        .utc()\n        .subtract(1, \"month\")\n        .startOf(\"month\"),\n      step: null,\n      submitted: false\n    };\n  },\n  mounted: function() {\n    this.checkDate();\n  },\n\n  computed: {\n    ...mapGetters({\n      idBoard: \"user/idBoard\",\n      nameBoard: \"user/nameBoard\",\n      token: \"user/token\"\n    }),\n    nextMonth: function() {\n      return moment.utc(this.month).add(1, \"month\");\n    },\n    // For multi prop watchers\n    range: function() {\n      return this.startDate, this.endDate;\n    }\n  },\n\n  methods: {\n    focusInput() {\n      setTimeout(() => {\n        this.$refs.startDate.focus();\n      }, 200);\n    },\n    checkDate: function() {\n      boardservice\n        .fetchchecksetting({ idBoard: this.idBoard })\n        .then(res => {\n          this.isShowModel = true;\n          this.points = res.data.scoreSize;\n          this.lists = res.data.lists.list;\n          this.listed = res.data.lists.selectList;\n          if (res.data.date.status == true) {\n            this.startDated = moment.utc(res.data.date.startDate, \"YYYY/MM/DD\");\n            this.startDate = this.startDated;\n            this.validated = res.data.date.status;\n            // this.totaled = res.data.date.sprintDay;\n            this.total = res.data.date.sprintDay;\n          }\n        })\n        .catch(err => {\n          alert(err);\n        });\n    },\n    clear: function() {\n      this.total = \"\";\n    },\n\n    reset: function() {\n      this.validated = false;\n      this.startDate = moment.utc();\n      this.endDate = moment.utc();\n      this.total = \"\";\n      this.$refs.score.reset();\n      this.focusInput();\n    },\n\n    goToPrevMonth: function() {\n      this.month = moment.utc(this.month).subtract(1, \"month\");\n    },\n    goToNextMonth: function() {\n      this.month = moment.utc(this.month).add(1, \"month\");\n    },\n    selectDate: function(date) {\n      if (this.step === \"selectStartDate\") {\n        this.startDate = date;\n      } else if (this.step === \"endDate\") {\n        this.endDate = date;\n      }\n    },\n    // Step flow for date range selections\n    nextStep: function() {\n      if (this.step === \"selectStartDate\") {\n        this.step = \"selectEndDate\";\n        this.$refs.endDate.focus();\n      } else if (this.step === \"endDate\") {\n        this.step = null;\n        this.$refs.endDate.blur();\n      }\n    },\n\n    // Try to update the step date from an input value\n    inputDate: function(input) {\n      let date = moment.utc(input.target.value, \"YYYY/MM/DD\");\n      if (date.isValid()) {\n        this.selectDate(date);\n      }\n      this.nextStep();\n    },\n    formValidate() {\n      return this.$refs.select.formValidate(), this.$refs.score.formValidate();\n    },\n    countDownChanged(dismissCountDown) {\n        this.dismissCountDown = dismissCountDown\n      },\n    submit: function() {\n      this.submitted = true;\n      this.$validator.validate().then(valid => {\n        this.formValidate();\n        this.totaled = parseInt(this.total);\n        if (valid) {\n          this.dismissCountDown = this.dismissSecs\n          boardservice\n            .fetchsettingdata({\n              sprintDate: {\n                startDate: this.startDate,\n                sprintDay: this.totaled,\n                endDate: this.endDate,\n                idBoard: this.idBoard\n              },\n              scoreSize: {\n                Points: [\n                  parseFloat(this.pointt[0]),\n                  parseFloat(this.pointt[1]),\n                  parseFloat(this.pointt[2]),\n                  parseFloat(this.pointt[3]),\n                  parseFloat(this.pointt[4]),\n                  parseFloat(this.pointt[5]),\n                  parseFloat(this.pointt[6]),\n                  parseFloat(this.pointt[7])\n                ]\n              },\n              selectList: this.selectListed\n            })\n            .then(() => {\n              // this.$router.push(\"/feature\");\n            })\n            .catch(err => {\n              if (err) {\n                alert(\"Sorry Connection not found\");\n              }\n            });\n        }\n      });\n    }\n  },\n  watch: {\n    total: function(value) {\n      this.endDate = moment\n        .utc(this.startDate, \"YYYY/MM/DD\")\n        .add(1 * value - 1, \"days\");\n    }\n  },\n  filters: {\n    dateFormat: function(value) {\n      return value ? value.format(\"YYYY/MM/DD\") : \"\";\n    }\n  },\n  components: { DateRangePickerCalendar, setscore, selectlist }\n};\n</script>\n\n<style>\n/* Custom row */\n.daterangepicker-row {\n  margin: -0.5rem;\n}\n.daterangepicker-date-input {\n  min-width: 120px;\n}\n\n/* Select menus border */\n.daterangepicker-range-border {\n  border-color: #17a2b8 !important;\n}\n\n.daterangepicker-range {\n  background-color: red !important;\n  color: #ffffff;\n}\n\n/* Date input focus */\n.daterangepicker-date-input:focus {\n  border-color: #17a2b8 !important;\n  box-shadow: 0 0 0 0.2rem rgba(23, 162, 184, 0.25) !important;\n}\n\n.col-setdate {\n  padding: 40px;\n}\n\n.row-setdate {\n  display: -ms-flexbox;\n  display: flex;\n  -ms-flex-wrap: wrap;\n  flex-wrap: wrap;\n}\n\n.card-setdate {\n  border-radius: 10px;\n}\n\n.loading {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n}\n</style>\n"]}]}